#AtoM 2.3.1 설치

##(참고) Putty 터미널에서 붙여넣기
Putty 터미널에서 복사한 명령어를 붙여넣을 때는 마우스 오른쪽 키 클릭


##root 계정 만들기
$ sudo passwd root
새 비밀번호 입력 후 엔터
새 비밀번호 재입력 후 엔터
(비밀번호를 입력할 땐 화면에 패스워드가 출력되진 않지만 비밀번호가 입력된 것임)

root계정으로 로그인
$ su -

앞에서 설정한 root계정 비밀번호 입력 후 엔터


##Ubuntu 업데이트
$ sudo apt-get update
$ sudo apt-get upgrade

##Nano 에디터 설치
$ sudo apt-get install nano


##Ubuntu 패키지 저장소 업데이트
$ sudo apt install percona-server-server-5.6


##MySQL
$ sudo apt install percona-server-server-5.6
MySQL 비밀번호 2회 입력


##ELASTICSEARCH 
$ sudo apt install openjdk-8-jre-headless software-properties-common
$ wget -qO - http://packages.elasticsearch.org/GPG-KEY-elasticsearch | sudo apt-key add -
$ sudo add-apt-repository "deb http://packages.elasticsearch.org/elasticsearch/1.7/debian stable main"
$ sudo apt update
$ sudo apt install elasticsearch
$ sudo systemctl enable elasticsearch
$ sudo systemctl start elasticsearch

##WEB SERVER (NginX)
$ sudo apt install nginx
$ sudo touch /etc/nginx/sites-available/atom
$ sudo ln -sf /etc/nginx/sites-available/atom /etc/nginx/sites-enabled/atom
$ sudo rm /etc/nginx/sites-enabled/default

Nano 에디터로 atom 문서 만들기
$ sudo nano /etc/nginx/sites-available/atom

빈 화면이 나오면, 아래 문구 복사하여 붙여넣기
------------------------------(여기부터 문구 )
upstream atom {
  server unix:/run/php7.0-fpm.atom.sock;
}

server {

  listen 80;
  root /usr/share/nginx/atom;

  # http://wiki.nginx.org/HttpCoreModule#server_name
  # _ means catch any, but it's better if you replace this with your server
  # name, e.g. archives.foobar.com
  server_name _;

  client_max_body_size 72M;

  # http://wiki.nginx.org/HttpCoreModule#try_files
  location / {
    try_files $uri /index.php?$args;
  }

  location ~ /\. {
    deny all;
    return 404;
  }

  location ~* (\.yml|\.ini|\.tmpl)$ {
    deny all;
    return 404;
  }

  location ~* /(?:uploads|files)/.*\.php$ {
    deny all;
    return 404;
  }

  location ~* /uploads/r/(.*)/conf/ {

  }

  location ~* ^/uploads/r/(.*)$ {
    include /etc/nginx/fastcgi_params;
    set $index /index.php;
    fastcgi_param SCRIPT_FILENAME $document_root$index;
    fastcgi_param SCRIPT_NAME $index;
    fastcgi_pass atom;
  }

  location ~ ^/private/(.*)$ {
    internal;
    alias /usr/share/nginx/atom/$1;
  }

  location ~ ^/(index|qubit_dev)\.php(/|$) {
    include /etc/nginx/fastcgi_params;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    fastcgi_split_path_info ^(.+\.php)(/.*)$;
    fastcgi_pass atom;
  }

  location ~* \.php$ {
    deny all;
    return 404;
  }

}
------------------------------(여기까지 문구 종료)

ctrl+O 누르고 엔터 (저장)
ctrl+X (문서닫기)


NginX 재시작
$ sudo systemctl enable nginx
$ sudo systemctl reload nginx


##PHP
$ sudo apt install php7.0-cli php7.0-curl php7.0-json php7.0-ldap php7.0-mysql php7.0-opcache php7.0-readline php7.0-xml php7.0-fpm php7.0-mbstring php7.0-mcrypt php7.0-xsl php7.0-zip php-memcache php-apcu
$ sudo apt install php-dev
$ sudo pecl install apcu_bc-beta

설치 도중 아래 문구 나오면 엔터 키 입력
Enable internal debugging in APCu [no]: 엔터

$ echo "extension=apc.so" | sudo tee /etc/php/7.0/mods-available/apcu-bc.ini
$ sudo ln -sf /etc/php/7.0/mods-available/apcu-bc.ini /etc/php/7.0/fpm/conf.d/30-apcu-bc.ini
$ sudo ln -sf /etc/php/7.0/mods-available/apcu-bc.ini /etc/php/7.0/cli/conf.d/30-apcu-bc.ini
$ sudo systemctl restart php7.0-fpm

Nano 에디터로 atom.conf 문서 수정하기
$ sudo nano /etc/php/7.0/fpm/pool.d/atom.conf

빈 화면이 나오면, 아래 문구 복사하여 붙여넣기
------------------------------(여기부터 문구 )
[atom]

; The user running the application
user = www-data
group = www-data

; Use UNIX sockets if Nginx and PHP-FPM are running in the same machine
listen = /run/php7.0-fpm.atom.sock
listen.owner = www-data
listen.group = www-data
listen.mode = 0600

; The following directives should be tweaked based in your hardware resources
pm = dynamic
pm.max_children = 30
pm.start_servers = 10
pm.min_spare_servers = 10
pm.max_spare_servers = 10
pm.max_requests = 200

chdir = /

; Some defaults for your PHP production environment
; A full list here: http://www.php.net/manual/en/ini.list.php
php_admin_value[expose_php] = off
php_admin_value[allow_url_fopen] = on
php_admin_value[memory_limit] = 512M
php_admin_value[max_execution_time] = 120
php_admin_value[post_max_size] = 72M
php_admin_value[upload_max_filesize] = 64M
php_admin_value[max_file_uploads] = 10
php_admin_value[cgi.fix_pathinfo] = 0
php_admin_value[display_errors] = off
php_admin_value[display_startup_errors] = off
php_admin_value[html_errors] = off
php_admin_value[session.use_only_cookies] = 0

; APC
php_admin_value[apc.enabled] = 1
php_admin_value[apc.shm_size] = 64M
php_admin_value[apc.num_files_hint] = 5000
php_admin_value[apc.stat] = 0

; Zend OPcache
php_admin_value[opcache.enable] = 1
php_admin_value[opcache.memory_consumption] = 192
php_admin_value[opcache.interned_strings_buffer] = 16
php_admin_value[opcache.max_accelerated_files] = 4000
php_admin_value[opcache.validate_timestamps] = 0
php_admin_value[opcache.fast_shutdown] = 1

; This is a good place to define some environment variables, e.g. use
; ATOM_DEBUG_IP to define a list of IP addresses with full access to the
; debug frontend or ATOM_READ_ONLY if you want AtoM to prevent
; authenticated users
env[ATOM_DEBUG_IP] = "10.10.10.10,127.0.0.1"
env[ATOM_READ_ONLY] = "off"
------------------------------(여기까지 문구 종료)

ctrl+O 누르고 엔터 (저장)
ctrl+X (문서닫기)

프로세스 매니저 활성화 및 재시작
$ sudo systemctl enable php7.0-fpm
$ sudo systemctl start php7.0-fpm


$ 
$ 
$ 
$ 
$ 
$ 
$ 
$ 
$ 
$ 
$ 
$ 
$ 
$ 
$ 
$ 
$ 
$ 
$ 
$ 
$ 
$ 
$ 
$ 
$ 
$ 
$ 
$ 
$ 
$ 
$ 
$ 
$ 
$ 
$ 
$ 
$ 
$ 
$ 
$ 
$ 
$ 
$ 

